
#include "gerstner_waves.glsl"

layout(quads, fractional_even_spacing, cw) in; ///< Output quads with smooth transitions.

layout(set = 0, binding = 3) uniform UniformBlock {
	mat4 mvp; ///< Transformation matrix.
	float time; ///< Elapsed time.
};

/** Gerstner waves parameters buffer. */
layout(std140, set = 2, binding = 0) uniform Waves {
	Wave waves[8]; ///< Waves parameters.
};

layout(location = 0) in vec3 iPos[]; ///< World position.

layout(location = 0) out vec3 oPos; ///< World space position.
layout(location = 1) out vec3 oSrcPos; ///< World space position before waves perturbation.
layout(location = 2) out vec3 oPrevPos; ///< World space position before small scale waves perturbation.

/** Apply Gerstner waves pertubrations to ocean plane. */
void main(){

	// Initial position.
	vec3 worldPos = mix(
			mix(iPos[0], iPos[1], gl_TessCoord.x),
			mix(iPos[3], iPos[2], gl_TessCoord.x),
			gl_TessCoord.y);
	worldPos.y = 0.0;

	oSrcPos = worldPos;

	// Apply perturbation.
	// High frequency waves.
	vec3 posDelta = vec3(0.0);
	for(int i = 7; i > 2; --i){
		posDelta += gerstner(waves[i], worldPos.xz, time);
	}
	// Update position.
	worldPos += posDelta;
	oPrevPos = worldPos;
	
	// Low frequency waves.
	posDelta = vec3(0.0);
	for(int i = 2; i >= 0; --i){
		posDelta += gerstner(waves[i], worldPos.xz, time);
	}
	worldPos += posDelta;

	gl_Position = mvp * vec4(worldPos, 1.0);
	oPos = worldPos;

	
}
