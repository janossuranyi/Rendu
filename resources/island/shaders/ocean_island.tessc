
layout(vertices = 4) out; ///< Output patches.

layout(set = 0, binding = 2) uniform UniformBlock {
	vec3 camDir; ///< Camera direction.
	vec3 camPos; ///< Camera world position.
	float maxLevelX; ///< Maximum LOD.
	float maxLevelY; ///< Maximum level scaling.
	float distanceScale; ///< Extra distance scaling.
};

layout(location = 0) in vec3 inPos[];  ///< Grid positions.

layout(location = 0) out vec3 outPos[4]; ///< World space position.

/** Evaluate the LOD at a given position.
\param pos the world space position
\return the level of detail.
*/
float lodCorner(vec3 pos){
	float camDist = distance(pos, camPos);
	float level = log2((camDist + 0.0001) * distanceScale);
	return clamp(level, 0.0, maxLevelX);
}

/** Subdivide patches based on distance to camera. */
void main(){
	outPos[gl_InvocationID] = inPos[gl_InvocationID];

	// Only do the work at the first corner.
	if(gl_InvocationID == 0){
		// Half-plane culling.
		if(dot(inPos[0] - camPos, camDir) < 0.0 &&
		  dot(inPos[1] - camPos, camDir) < 0.0 &&
		  dot(inPos[2] - camPos, camDir) < 0.0 &&
		  dot(inPos[3] - camPos, camDir) < 0.0
		){
			gl_TessLevelOuter[0] = -1.0;
			gl_TessLevelOuter[1] = -1.0;
			gl_TessLevelOuter[2] = -1.0;
			gl_TessLevelOuter[3] = -1.0;
			gl_TessLevelInner[0] = -1.0;
			gl_TessLevelInner[1] = -1.0;
			return;
		}
		// Estimate the 4 corner LODs.
		float lod0 = lodCorner(inPos[0]);
		float lod1 = lodCorner(inPos[1]);
		float lod2 = lodCorner(inPos[2]);
		float lod3 = lodCorner(inPos[3]);
		vec4 lods = vec4(lod0, lod1, lod2, lod3);
		// For each edge, take the minimal lod.
		vec4 edgeLods = min(lods.xyzw, lods.wxyz);
		vec4 outerLevels = maxLevelY * exp2(-edgeLods);
		float innerLevel = max(max(outerLevels.x, outerLevels.y), max(outerLevels.z, outerLevels.w));
		// Output levels.
		gl_TessLevelOuter[0] = outerLevels[0];
		gl_TessLevelOuter[1] = outerLevels[1];
		gl_TessLevelOuter[2] = outerLevels[2];
		gl_TessLevelOuter[3] = outerLevels[3];
		gl_TessLevelInner[0] = innerLevel;
		gl_TessLevelInner[1] = innerLevel;
	}
}
